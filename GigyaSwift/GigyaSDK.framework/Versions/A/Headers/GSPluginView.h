#import <UIKit/UIKit.h>
#import "Gigya.h"

@class GSPluginView;

/**
 This protocol defines methods that can be implemented to handle <GSPluginView> events. All methods are optional.
 */
@protocol GSPluginViewDelegate <NSObject>

@optional

/**
 Invoked after a plugin view has finished loading a plugin.
 
 @param pluginView The plugin view that has finished loading.
 @param event A dictionary containing details of the event, with fields as described in the relevant plugin's documentation.
 */
- (void)pluginView:(GSPluginView *)pluginView finishedLoadingPluginWithEvent:(NSDictionary *)event;

/**
 Invoked when the plugin fires a <a target="_blank" href="http://developers.gigya.com/display/GD/Events#Events-PluginEvents">custom event</a>. (For example - commentUI's <a target="_blank" href="http://developers.gigya.com/display/GD/comments.showCommentsUI+JS#comments.showCommentsUIJS-onCommentSubmittedEventData">commentSubmitted</a>)
 
 @param pluginView The plugin view that has fired the event.
 @param event The event object.
 */
- (void)pluginView:(GSPluginView *)pluginView firedEvent:(NSDictionary *)event;

/**
 Invoked after encountering an error, either generated by the plugin or while loading.
 
 @param pluginView The plugin view that has encountered the error.
 @param error An error object specifying the specific error.
 */
- (void)pluginView:(GSPluginView *)pluginView didFailWithError:(NSError *)error;

@end

/** `GSPluginView` is a custom UIView that renders Gigya <a target="_blank" href="http://developers.gigya.com/display/GD/Plugins">JS Plugins</a> and integrates them seamlessly with the Gigya iOS SDK.

 Example - adding a `GSPluginView` to a `UIViewController`:
 
    GSPluginView *pluginView = [[GSPluginView alloc] initWithFrame:CGRectMake(0, 0, 320, 200)];
    pluginView.delegate = self;
    [pluginView loadPlugin:@"comments.commentsUI" parameters:params];
    [self.view addSubview:pluginView];
 
 */
@interface GSPluginView : UIView

/** @name Setting the Delegate */

/*!
 The delegate object that receives plugin events.
 
 @see GSPluginViewDelegate
 */
@property (nonatomic, weak) id<GSPluginViewDelegate> delegate;

/** @name Loading a Plugin */

/*!
 Loads a plugin with the given name.
 
 @param plugin The plugin's name as described in the table above.
 */
- (void)loadPlugin:(NSString *)plugin;

/*!
 Loads a plugin with the given name and parameters.
 
 @param plugin The plugin's name as described in the table above.
 @param parameters The parameters passed to the plugin.
 */
- (void)loadPlugin:(NSString *)plugin parameters:(NSDictionary *)parameters;

/*!
 The name of the loaded plugin.
 */
@property (nonatomic, readonly) NSString *plugin;

/** @name Configuring Plugin Display */

/*!
 A Boolean value that specifies whether to show a progress indicator during a login process initiated from the plugin view.
 */
@property (nonatomic) BOOL showLoginProgress;

/*!
 Text to be displayed under the progress indicator during a login process initiated from the plugin view.
 */
@property (nonatomic, copy) NSString *loginProgressText;

/*!
 A Boolean value that specifies whether to show a progress indicator while the plugin is loaded.
 */
@property (nonatomic) BOOL showLoadingProgress;

/*!
 Text to be displayed under the progress indicator while the plugin is loaded.
 */
@property (nonatomic, copy) NSString *loadingProgressText;

@property (nonatomic) NSInteger javascriptLoadingTimeout;



@end
